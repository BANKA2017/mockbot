// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:             db,
		BotSetting:     newBotSetting(db, opts...),
		ChatSetting:    newChatSetting(db, opts...),
		Checkin:        newCheckin(db, opts...),
		GroupMessage:   newGroupMessage(db, opts...),
		Message:        newMessage(db, opts...),
		Setting:        newSetting(db, opts...),
		SqliteSequence: newSqliteSequence(db, opts...),
		Staff:          newStaff(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	BotSetting     botSetting
	ChatSetting    chatSetting
	Checkin        checkin
	GroupMessage   groupMessage
	Message        message
	Setting        setting
	SqliteSequence sqliteSequence
	Staff          staff
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		BotSetting:     q.BotSetting.clone(db),
		ChatSetting:    q.ChatSetting.clone(db),
		Checkin:        q.Checkin.clone(db),
		GroupMessage:   q.GroupMessage.clone(db),
		Message:        q.Message.clone(db),
		Setting:        q.Setting.clone(db),
		SqliteSequence: q.SqliteSequence.clone(db),
		Staff:          q.Staff.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		BotSetting:     q.BotSetting.replaceDB(db),
		ChatSetting:    q.ChatSetting.replaceDB(db),
		Checkin:        q.Checkin.replaceDB(db),
		GroupMessage:   q.GroupMessage.replaceDB(db),
		Message:        q.Message.replaceDB(db),
		Setting:        q.Setting.replaceDB(db),
		SqliteSequence: q.SqliteSequence.replaceDB(db),
		Staff:          q.Staff.replaceDB(db),
	}
}

type queryCtx struct {
	BotSetting     *botSettingDo
	ChatSetting    *chatSettingDo
	Checkin        *checkinDo
	GroupMessage   *groupMessageDo
	Message        *messageDo
	Setting        *settingDo
	SqliteSequence *sqliteSequenceDo
	Staff          *staffDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		BotSetting:     q.BotSetting.WithContext(ctx),
		ChatSetting:    q.ChatSetting.WithContext(ctx),
		Checkin:        q.Checkin.WithContext(ctx),
		GroupMessage:   q.GroupMessage.WithContext(ctx),
		Message:        q.Message.WithContext(ctx),
		Setting:        q.Setting.WithContext(ctx),
		SqliteSequence: q.SqliteSequence.WithContext(ctx),
		Staff:          q.Staff.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
