// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/BANKA2017/mockbot/dao/model"
)

func newBotSetting(db *gorm.DB, opts ...gen.DOOption) botSetting {
	_botSetting := botSetting{}

	_botSetting.botSettingDo.UseDB(db, opts...)
	_botSetting.botSettingDo.UseModel(&model.BotSetting{})

	tableName := _botSetting.botSettingDo.TableName()
	_botSetting.ALL = field.NewAsterisk(tableName)
	_botSetting.BotID = field.NewString(tableName, "bot_id")
	_botSetting.Key = field.NewString(tableName, "key")
	_botSetting.Value = field.NewString(tableName, "value")

	_botSetting.fillFieldMap()

	return _botSetting
}

type botSetting struct {
	botSettingDo botSettingDo

	ALL   field.Asterisk
	BotID field.String
	Key   field.String
	Value field.String

	fieldMap map[string]field.Expr
}

func (b botSetting) Table(newTableName string) *botSetting {
	b.botSettingDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b botSetting) As(alias string) *botSetting {
	b.botSettingDo.DO = *(b.botSettingDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *botSetting) updateTableName(table string) *botSetting {
	b.ALL = field.NewAsterisk(table)
	b.BotID = field.NewString(table, "bot_id")
	b.Key = field.NewString(table, "key")
	b.Value = field.NewString(table, "value")

	b.fillFieldMap()

	return b
}

func (b *botSetting) WithContext(ctx context.Context) *botSettingDo {
	return b.botSettingDo.WithContext(ctx)
}

func (b botSetting) TableName() string { return b.botSettingDo.TableName() }

func (b botSetting) Alias() string { return b.botSettingDo.Alias() }

func (b botSetting) Columns(cols ...field.Expr) gen.Columns { return b.botSettingDo.Columns(cols...) }

func (b *botSetting) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *botSetting) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 3)
	b.fieldMap["bot_id"] = b.BotID
	b.fieldMap["key"] = b.Key
	b.fieldMap["value"] = b.Value
}

func (b botSetting) clone(db *gorm.DB) botSetting {
	b.botSettingDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b botSetting) replaceDB(db *gorm.DB) botSetting {
	b.botSettingDo.ReplaceDB(db)
	return b
}

type botSettingDo struct{ gen.DO }

func (b botSettingDo) Debug() *botSettingDo {
	return b.withDO(b.DO.Debug())
}

func (b botSettingDo) WithContext(ctx context.Context) *botSettingDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b botSettingDo) ReadDB() *botSettingDo {
	return b.Clauses(dbresolver.Read)
}

func (b botSettingDo) WriteDB() *botSettingDo {
	return b.Clauses(dbresolver.Write)
}

func (b botSettingDo) Session(config *gorm.Session) *botSettingDo {
	return b.withDO(b.DO.Session(config))
}

func (b botSettingDo) Clauses(conds ...clause.Expression) *botSettingDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b botSettingDo) Returning(value interface{}, columns ...string) *botSettingDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b botSettingDo) Not(conds ...gen.Condition) *botSettingDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b botSettingDo) Or(conds ...gen.Condition) *botSettingDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b botSettingDo) Select(conds ...field.Expr) *botSettingDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b botSettingDo) Where(conds ...gen.Condition) *botSettingDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b botSettingDo) Order(conds ...field.Expr) *botSettingDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b botSettingDo) Distinct(cols ...field.Expr) *botSettingDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b botSettingDo) Omit(cols ...field.Expr) *botSettingDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b botSettingDo) Join(table schema.Tabler, on ...field.Expr) *botSettingDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b botSettingDo) LeftJoin(table schema.Tabler, on ...field.Expr) *botSettingDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b botSettingDo) RightJoin(table schema.Tabler, on ...field.Expr) *botSettingDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b botSettingDo) Group(cols ...field.Expr) *botSettingDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b botSettingDo) Having(conds ...gen.Condition) *botSettingDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b botSettingDo) Limit(limit int) *botSettingDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b botSettingDo) Offset(offset int) *botSettingDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b botSettingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *botSettingDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b botSettingDo) Unscoped() *botSettingDo {
	return b.withDO(b.DO.Unscoped())
}

func (b botSettingDo) Create(values ...*model.BotSetting) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b botSettingDo) CreateInBatches(values []*model.BotSetting, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b botSettingDo) Save(values ...*model.BotSetting) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b botSettingDo) First() (*model.BotSetting, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.BotSetting), nil
	}
}

func (b botSettingDo) Take() (*model.BotSetting, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.BotSetting), nil
	}
}

func (b botSettingDo) Last() (*model.BotSetting, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.BotSetting), nil
	}
}

func (b botSettingDo) Find() ([]*model.BotSetting, error) {
	result, err := b.DO.Find()
	return result.([]*model.BotSetting), err
}

func (b botSettingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BotSetting, err error) {
	buf := make([]*model.BotSetting, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b botSettingDo) FindInBatches(result *[]*model.BotSetting, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b botSettingDo) Attrs(attrs ...field.AssignExpr) *botSettingDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b botSettingDo) Assign(attrs ...field.AssignExpr) *botSettingDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b botSettingDo) Joins(fields ...field.RelationField) *botSettingDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b botSettingDo) Preload(fields ...field.RelationField) *botSettingDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b botSettingDo) FirstOrInit() (*model.BotSetting, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.BotSetting), nil
	}
}

func (b botSettingDo) FirstOrCreate() (*model.BotSetting, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.BotSetting), nil
	}
}

func (b botSettingDo) FindByPage(offset int, limit int) (result []*model.BotSetting, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b botSettingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b botSettingDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b botSettingDo) Delete(models ...*model.BotSetting) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *botSettingDo) withDO(do gen.Dao) *botSettingDo {
	b.DO = *do.(*gen.DO)
	return b
}
