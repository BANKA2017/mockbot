// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/BANKA2017/mockbot/dao/model"
)

func newGroupMessage(db *gorm.DB, opts ...gen.DOOption) groupMessage {
	_groupMessage := groupMessage{}

	_groupMessage.groupMessageDo.UseDB(db, opts...)
	_groupMessage.groupMessageDo.UseModel(&model.GroupMessage{})

	tableName := _groupMessage.groupMessageDo.TableName()
	_groupMessage.ALL = field.NewAsterisk(tableName)
	_groupMessage.MessageID = field.NewString(tableName, "message_id")
	_groupMessage.ChatID = field.NewString(tableName, "chat_id")
	_groupMessage.UserID = field.NewString(tableName, "user_id")
	_groupMessage.FullName = field.NewString(tableName, "full_name")
	_groupMessage.Date = field.NewInt32(tableName, "date")
	_groupMessage.Text = field.NewString(tableName, "text")
	_groupMessage.RawContent = field.NewString(tableName, "raw_content")

	_groupMessage.fillFieldMap()

	return _groupMessage
}

type groupMessage struct {
	groupMessageDo groupMessageDo

	ALL        field.Asterisk
	MessageID  field.String
	ChatID     field.String
	UserID     field.String
	FullName   field.String
	Date       field.Int32
	Text       field.String
	RawContent field.String

	fieldMap map[string]field.Expr
}

func (g groupMessage) Table(newTableName string) *groupMessage {
	g.groupMessageDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g groupMessage) As(alias string) *groupMessage {
	g.groupMessageDo.DO = *(g.groupMessageDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *groupMessage) updateTableName(table string) *groupMessage {
	g.ALL = field.NewAsterisk(table)
	g.MessageID = field.NewString(table, "message_id")
	g.ChatID = field.NewString(table, "chat_id")
	g.UserID = field.NewString(table, "user_id")
	g.FullName = field.NewString(table, "full_name")
	g.Date = field.NewInt32(table, "date")
	g.Text = field.NewString(table, "text")
	g.RawContent = field.NewString(table, "raw_content")

	g.fillFieldMap()

	return g
}

func (g *groupMessage) WithContext(ctx context.Context) *groupMessageDo {
	return g.groupMessageDo.WithContext(ctx)
}

func (g groupMessage) TableName() string { return g.groupMessageDo.TableName() }

func (g groupMessage) Alias() string { return g.groupMessageDo.Alias() }

func (g groupMessage) Columns(cols ...field.Expr) gen.Columns {
	return g.groupMessageDo.Columns(cols...)
}

func (g *groupMessage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *groupMessage) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 7)
	g.fieldMap["message_id"] = g.MessageID
	g.fieldMap["chat_id"] = g.ChatID
	g.fieldMap["user_id"] = g.UserID
	g.fieldMap["full_name"] = g.FullName
	g.fieldMap["date"] = g.Date
	g.fieldMap["text"] = g.Text
	g.fieldMap["raw_content"] = g.RawContent
}

func (g groupMessage) clone(db *gorm.DB) groupMessage {
	g.groupMessageDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g groupMessage) replaceDB(db *gorm.DB) groupMessage {
	g.groupMessageDo.ReplaceDB(db)
	return g
}

type groupMessageDo struct{ gen.DO }

func (g groupMessageDo) Debug() *groupMessageDo {
	return g.withDO(g.DO.Debug())
}

func (g groupMessageDo) WithContext(ctx context.Context) *groupMessageDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g groupMessageDo) ReadDB() *groupMessageDo {
	return g.Clauses(dbresolver.Read)
}

func (g groupMessageDo) WriteDB() *groupMessageDo {
	return g.Clauses(dbresolver.Write)
}

func (g groupMessageDo) Session(config *gorm.Session) *groupMessageDo {
	return g.withDO(g.DO.Session(config))
}

func (g groupMessageDo) Clauses(conds ...clause.Expression) *groupMessageDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g groupMessageDo) Returning(value interface{}, columns ...string) *groupMessageDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g groupMessageDo) Not(conds ...gen.Condition) *groupMessageDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g groupMessageDo) Or(conds ...gen.Condition) *groupMessageDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g groupMessageDo) Select(conds ...field.Expr) *groupMessageDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g groupMessageDo) Where(conds ...gen.Condition) *groupMessageDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g groupMessageDo) Order(conds ...field.Expr) *groupMessageDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g groupMessageDo) Distinct(cols ...field.Expr) *groupMessageDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g groupMessageDo) Omit(cols ...field.Expr) *groupMessageDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g groupMessageDo) Join(table schema.Tabler, on ...field.Expr) *groupMessageDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g groupMessageDo) LeftJoin(table schema.Tabler, on ...field.Expr) *groupMessageDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g groupMessageDo) RightJoin(table schema.Tabler, on ...field.Expr) *groupMessageDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g groupMessageDo) Group(cols ...field.Expr) *groupMessageDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g groupMessageDo) Having(conds ...gen.Condition) *groupMessageDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g groupMessageDo) Limit(limit int) *groupMessageDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g groupMessageDo) Offset(offset int) *groupMessageDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g groupMessageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *groupMessageDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g groupMessageDo) Unscoped() *groupMessageDo {
	return g.withDO(g.DO.Unscoped())
}

func (g groupMessageDo) Create(values ...*model.GroupMessage) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g groupMessageDo) CreateInBatches(values []*model.GroupMessage, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g groupMessageDo) Save(values ...*model.GroupMessage) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g groupMessageDo) First() (*model.GroupMessage, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GroupMessage), nil
	}
}

func (g groupMessageDo) Take() (*model.GroupMessage, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GroupMessage), nil
	}
}

func (g groupMessageDo) Last() (*model.GroupMessage, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GroupMessage), nil
	}
}

func (g groupMessageDo) Find() ([]*model.GroupMessage, error) {
	result, err := g.DO.Find()
	return result.([]*model.GroupMessage), err
}

func (g groupMessageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GroupMessage, err error) {
	buf := make([]*model.GroupMessage, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g groupMessageDo) FindInBatches(result *[]*model.GroupMessage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g groupMessageDo) Attrs(attrs ...field.AssignExpr) *groupMessageDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g groupMessageDo) Assign(attrs ...field.AssignExpr) *groupMessageDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g groupMessageDo) Joins(fields ...field.RelationField) *groupMessageDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g groupMessageDo) Preload(fields ...field.RelationField) *groupMessageDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g groupMessageDo) FirstOrInit() (*model.GroupMessage, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GroupMessage), nil
	}
}

func (g groupMessageDo) FirstOrCreate() (*model.GroupMessage, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GroupMessage), nil
	}
}

func (g groupMessageDo) FindByPage(offset int, limit int) (result []*model.GroupMessage, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g groupMessageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g groupMessageDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g groupMessageDo) Delete(models ...*model.GroupMessage) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *groupMessageDo) withDO(do gen.Dao) *groupMessageDo {
	g.DO = *do.(*gen.DO)
	return g
}
